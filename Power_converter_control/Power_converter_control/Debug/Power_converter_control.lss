
Power_converter_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080010e  0080010e  000007ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a51  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059b  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  9e:	0c 94 94 03 	jmp	0x728	; 0x728 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <md_i>:
		I = I_ant;
	}
	I_ant = I;
	
	return salida;
}
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
  b2:	6b 01       	movw	r12, r22
  b4:	7c 01       	movw	r14, r24
  b6:	2f e6       	ldi	r18, 0x6F	; 111
  b8:	32 e1       	ldi	r19, 0x12	; 18
  ba:	43 e8       	ldi	r20, 0x83	; 131
  bc:	5a e3       	ldi	r21, 0x3A	; 58
  be:	0e 94 22 03 	call	0x644	; 0x644 <__gesf2>
  c2:	18 16       	cp	r1, r24
  c4:	3c f4       	brge	.+14     	; 0xd4 <md_i+0x2e>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
  ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
  d2:	15 c0       	rjmp	.+42     	; 0xfe <md_i+0x58>
  d4:	2f e6       	ldi	r18, 0x6F	; 111
  d6:	32 e1       	ldi	r19, 0x12	; 18
  d8:	43 e8       	ldi	r20, 0x83	; 131
  da:	5a eb       	ldi	r21, 0xBA	; 186
  dc:	c7 01       	movw	r24, r14
  de:	b6 01       	movw	r22, r12
  e0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__cmpsf2>
  e4:	88 23       	and	r24, r24
  e6:	3c f4       	brge	.+14     	; 0xf6 <md_i+0x50>
  e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
  ec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <md_i+0x58>
  f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
  fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	08 95       	ret

00000108 <medicion_variables>:

/********************************/
/*** Medición y procesamiento ***/
/********************************/

void medicion_variables(void){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29

	outputCurrent = adc_buffer[0]*outputCurrentGain;
 10c:	c9 e2       	ldi	r28, 0x29	; 41
 10e:	d1 e0       	ldi	r29, 0x01	; 1
 110:	68 81       	ld	r22, Y
 112:	79 81       	ldd	r23, Y+1	; 0x01
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 11c:	2c ec       	ldi	r18, 0xCC	; 204
 11e:	35 e4       	ldi	r19, 0x45	; 69
 120:	4f ec       	ldi	r20, 0xCF	; 207
 122:	5b e3       	ldi	r21, 0x3B	; 59
 124:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 128:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <outputCurrent>
 12c:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <outputCurrent+0x1>
 130:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <outputCurrent+0x2>
 134:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <outputCurrent+0x3>
	outputVoltage = adc_buffer[1]*outputVoltageGain;
 138:	6a 81       	ldd	r22, Y+2	; 0x02
 13a:	7b 81       	ldd	r23, Y+3	; 0x03
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 144:	2e ee       	ldi	r18, 0xEE	; 238
 146:	33 ee       	ldi	r19, 0xE3	; 227
 148:	40 ea       	ldi	r20, 0xA0	; 160
 14a:	5c e3       	ldi	r21, 0x3C	; 60
 14c:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 150:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <outputVoltage>
 154:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <outputVoltage+0x1>
 158:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <outputVoltage+0x2>
 15c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <outputVoltage+0x3>
	inputCurrent = adc_buffer[2]*inputCurrentGain;
 160:	6c 81       	ldd	r22, Y+4	; 0x04
 162:	7d 81       	ldd	r23, Y+5	; 0x05
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 16c:	21 e3       	ldi	r18, 0x31	; 49
 16e:	3b e1       	ldi	r19, 0x1B	; 27
 170:	4d e8       	ldi	r20, 0x8D	; 141
 172:	5b e3       	ldi	r21, 0x3B	; 59
 174:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 178:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <inputCurrent>
 17c:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <inputCurrent+0x1>
 180:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <inputCurrent+0x2>
 184:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <inputCurrent+0x3>
	inputVoltage = adc_buffer[3]*inputVoltageGain;
 188:	6e 81       	ldd	r22, Y+6	; 0x06
 18a:	7f 81       	ldd	r23, Y+7	; 0x07
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__floatunsisf>
 194:	2d e5       	ldi	r18, 0x5D	; 93
 196:	34 e7       	ldi	r19, 0x74	; 116
 198:	41 e5       	ldi	r20, 0x51	; 81
 19a:	5d e3       	ldi	r21, 0x3D	; 61
 19c:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 1a0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <inputVoltage>
 1a4:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <inputVoltage+0x1>
 1a8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <inputVoltage+0x2>
 1ac:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <inputVoltage+0x3>
	
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <__vector_13>:
}


/* Ejecución 5kHz del lazo de control */

ISR(TIMER1_OVF_vect){//TIMER1_COMPA_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	
	medicion_variables();
 1d8:	0e 94 84 00 	call	0x108	; 0x108 <medicion_variables>

	cli();
 1dc:	f8 94       	cli
	DUTY = (uint16_t)(pi_i(Iref, outputCurrent)*1599);
	#elif CONTROLADOR == 2
	Iref = pi_v(Vref, outputVoltage);
	DUTY = (uint16_t)(pi_i(Iref, outputCurrent)*1599);
	#elif CONTROLADOR == 3
	DUTY = md_i(Iref, outputCurrent)*1599;
 1de:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <outputCurrent>
 1e2:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <outputCurrent+0x1>
 1e6:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <outputCurrent+0x2>
 1ea:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <outputCurrent+0x3>
 1ee:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <Iref>
 1f2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <Iref+0x1>
 1f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Iref+0x2>
 1fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Iref+0x3>
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <md_i>
 202:	2f e3       	ldi	r18, 0x3F	; 63
 204:	36 e0       	ldi	r19, 0x06	; 6
 206:	ac 01       	movw	r20, r24
 208:	42 9f       	mul	r20, r18
 20a:	c0 01       	movw	r24, r0
 20c:	43 9f       	mul	r20, r19
 20e:	90 0d       	add	r25, r0
 210:	52 9f       	mul	r21, r18
 212:	90 0d       	add	r25, r0
 214:	11 24       	eor	r1, r1
 216:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 21a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
	#endif
	
	if (DUTY > dutyMax)
 21e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DUTY>
 222:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DUTY+0x1>
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dutyMax>
 22a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <dutyMax+0x1>
 22e:	82 17       	cp	r24, r18
 230:	93 07       	cpc	r25, r19
 232:	20 f4       	brcc	.+8      	; 0x23c <__vector_13+0x86>
		DUTY = dutyMax;
 234:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
	
	if (DUTY < dutyMin)
 23c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DUTY>
 240:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DUTY+0x1>
 244:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyMin>
 248:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyMin+0x1>
 24c:	28 17       	cp	r18, r24
 24e:	39 07       	cpc	r19, r25
 250:	20 f4       	brcc	.+8      	; 0x25a <__vector_13+0xa4>
		DUTY = dutyMin;
 252:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 256:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
	
	OCR1B = DUTY;                     // Actualizo ciclo de trabajo en generador PWM
 25a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DUTY>
 25e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <DUTY+0x1>
 262:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 266:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	sei();
 26a:	78 94       	sei
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <configurar_PWM>:
/*** Funciones de configuración ***/
/**********************************/

/* Configuración del generador de PWM a 1kHz */
void configurar_PWM(void){
	cli();									// Deshabilitar interrupciones globales
 28e:	f8 94       	cli
	DDRB |= (1<<DDB2);
 290:	84 b1       	in	r24, 0x04	; 4
 292:	84 60       	ori	r24, 0x04	; 4
 294:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1B1)|(0 << WGM10)|(1 << WGM11);// Configurar el Timer1 en modo Phase Correct PWM Mode y prescaler de 1
 296:	82 e2       	ldi	r24, 0x22	; 34
 298:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13)|(0 << WGM12) | (0 << CS11)|(1 << CS10);
 29c:	81 e1       	ldi	r24, 0x11	; 17
 29e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 1599;
 2a2:	8f e3       	ldi	r24, 0x3F	; 63
 2a4:	96 e0       	ldi	r25, 0x06	; 6
 2a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1B = 1000;							// Establecer el valor de comparación OCR1B
 2ae:	88 ee       	ldi	r24, 0xE8	; 232
 2b0:	93 e0       	ldi	r25, 0x03	; 3
 2b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIMSK1 = (1 << TOIE1);					// Habilitar la interrupción de OVF
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();									// Habilitar interrupciones globales
 2c0:	78 94       	sei
 2c2:	08 95       	ret

000002c4 <configurar_ADC>:


void configurar_ADC(void)
{
	//ADC seteado para medir y redisparar con el timer1
	ADMUX = (1 << REFS0) | (0 << ADLAR); //Referencia AVcc; justificado a izq.
 2c4:	ec e7       	ldi	r30, 0x7C	; 124
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	80 83       	st	Z, r24
	adc_index = 0;
 2cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <adc_index>
	ADMUX |= SETADC_CHANNEL(adc_channels[adc_index]);
 2d0:	80 81       	ld	r24, Z
 2d2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d6:	20 81       	ld	r18, Z
 2d8:	80 7f       	andi	r24, 0xF0	; 240
 2da:	9f 70       	andi	r25, 0x0F	; 15
 2dc:	89 2b       	or	r24, r25
 2de:	82 2b       	or	r24, r18
 2e0:	80 83       	st	Z, r24
	
	//Enable start retrigger interrupt prescaler
	ADCSRB = (1 << ADTS2) | (1 << ADTS1) | (0<< ADTS0); // retrigger en 0C0A compare match
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA = (1 << ADEN) | (0 << ADSC)  |  (1 << ADATE)  | (1 <<ADIE) | (0 << ADPS0) |(1 << ADPS1) |(1 << ADPS2);
 2e8:	8e ea       	ldi	r24, 0xAE	; 174
 2ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	//DIDR0 = (1 << ADC0D); //  deshabilita buffer digital en A5
	sei();
 2ee:	78 94       	sei
 2f0:	08 95       	ret

000002f2 <main>:
														LOOP MAIN
*****************************************************************************************************************************/
int main(void)
{
	// put your setup code here, to run once:
	configurar_PWM();
 2f2:	0e 94 47 01 	call	0x28e	; 0x28e <configurar_PWM>
	 DDRB |= (1<<DDB3);
 2f6:	84 b1       	in	r24, 0x04	; 4
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	84 b9       	out	0x04, r24	; 4
	configurar_ADC();
 2fc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <configurar_ADC>
	//Serial.begin(9600);
 
    while (1) 
    {
		/* Código ejecutable cada 1s = 1000 ms */
		if (ms - lastMeasurementTime >= 1000)
 300:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ms>
 304:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <ms+0x1>
 308:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <ms+0x2>
 30c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <ms+0x3>
 310:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <lastMeasurementTime>
 314:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <lastMeasurementTime+0x1>
 318:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <lastMeasurementTime+0x2>
 31c:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <lastMeasurementTime+0x3>
 320:	8c 01       	movw	r16, r24
 322:	9d 01       	movw	r18, r26
 324:	04 1b       	sub	r16, r20
 326:	15 0b       	sbc	r17, r21
 328:	26 0b       	sbc	r18, r22
 32a:	37 0b       	sbc	r19, r23
 32c:	b9 01       	movw	r22, r18
 32e:	a8 01       	movw	r20, r16
 330:	48 3e       	cpi	r20, 0xE8	; 232
 332:	53 40       	sbci	r21, 0x03	; 3
 334:	61 05       	cpc	r22, r1
 336:	71 05       	cpc	r23, r1
 338:	18 f3       	brcs	.-58     	; 0x300 <main+0xe>
		{
			lastMeasurementTime = ms;  // Actualizar el tiempo de la última muestra
 33a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lastMeasurementTime>
 33e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <lastMeasurementTime+0x1>
 342:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <lastMeasurementTime+0x2>
 346:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <lastMeasurementTime+0x3>
 34a:	da cf       	rjmp	.-76     	; 0x300 <main+0xe>

0000034c <__vector_21>:
/****************************************************************************************************************************
													ISR DE INTERRUPCION
*****************************************************************************************************************************/

ISR(ADC_vect)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	
	if (adc_index < 3){
 362:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adc_index>
 366:	e3 30       	cpi	r30, 0x03	; 3
 368:	20 f5       	brcc	.+72     	; 0x3b2 <__vector_21+0x66>
		adc_buffer[adc_index] = ADC;
 36a:	ae 2f       	mov	r26, r30
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 372:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 376:	aa 0f       	add	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	a7 5d       	subi	r26, 0xD7	; 215
 37c:	be 4f       	sbci	r27, 0xFE	; 254
 37e:	8d 93       	st	X+, r24
 380:	9c 93       	st	X, r25
		adc_index++;
 382:	ef 5f       	subi	r30, 0xFF	; 255
 384:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <adc_index>
		ADMUX = SETADC_CHANNEL(adc_channels[adc_index]);
 388:	ac e7       	ldi	r26, 0x7C	; 124
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	9c 91       	ld	r25, X
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e0 50       	subi	r30, 0x00	; 0
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	80 81       	ld	r24, Z
 396:	90 7f       	andi	r25, 0xF0	; 240
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	89 2b       	or	r24, r25
 39c:	8c 93       	st	X, r24
		ADCSRA |= (1 << ADSC);
 39e:	ea e7       	ldi	r30, 0x7A	; 122
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	80 83       	st	Z, r24
		PORTB ^= (1<<PORTB3);
 3a8:	95 b1       	in	r25, 0x05	; 5
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	89 27       	eor	r24, r25
 3ae:	85 b9       	out	0x05, r24	; 5
 3b0:	1a c0       	rjmp	.+52     	; 0x3e6 <__vector_21+0x9a>
	} else {
		adc_buffer[adc_index] = ADC;
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 3b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	e7 5d       	subi	r30, 0xD7	; 215
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	91 83       	std	Z+1, r25	; 0x01
 3c6:	80 83       	st	Z, r24
		adc_index = 0;
 3c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <adc_index>
		ADMUX = SETADC_CHANNEL(adc_channels[adc_index]);
 3cc:	ec e7       	ldi	r30, 0x7C	; 124
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	90 81       	ld	r25, Z
 3d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d6:	90 7f       	andi	r25, 0xF0	; 240
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	89 2b       	or	r24, r25
 3dc:	80 83       	st	Z, r24
		PORTB ^= (1<<PORTB3);
 3de:	95 b1       	in	r25, 0x05	; 5
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	89 27       	eor	r24, r25
 3e4:	85 b9       	out	0x05, r24	; 5
	}
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__subsf3>:
 3fc:	50 58       	subi	r21, 0x80	; 128

000003fe <__addsf3>:
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	0e 94 16 02 	call	0x42c	; 0x42c <__addsf3x>
 406:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>
 40a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscA>
 40e:	38 f0       	brcs	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_pscB>
 414:	20 f0       	brcs	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	39 f4       	brne	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	19 f4       	brne	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	26 f4       	brtc	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41e:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 422:	0e f4       	brtc	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	e0 95       	com	r30
 426:	e7 fb       	bst	r30, 7
 428:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>

0000042c <__addsf3x>:
 42c:	e9 2f       	mov	r30, r25
 42e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 432:	58 f3       	brcs	.-42     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 434:	ba 17       	cp	r27, r26
 436:	62 07       	cpc	r22, r18
 438:	73 07       	cpc	r23, r19
 43a:	84 07       	cpc	r24, r20
 43c:	95 07       	cpc	r25, r21
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3x+0x1c>
 440:	79 f4       	brne	.+30     	; 0x460 <__addsf3x+0x34>
 442:	a6 f5       	brtc	.+104    	; 0x4ac <__addsf3x+0x80>
 444:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_zero>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x20>
 44a:	e0 95       	com	r30
 44c:	0b 2e       	mov	r0, r27
 44e:	ba 2f       	mov	r27, r26
 450:	a0 2d       	mov	r26, r0
 452:	0b 01       	movw	r0, r22
 454:	b9 01       	movw	r22, r18
 456:	90 01       	movw	r18, r0
 458:	0c 01       	movw	r0, r24
 45a:	ca 01       	movw	r24, r20
 45c:	a0 01       	movw	r20, r0
 45e:	11 24       	eor	r1, r1
 460:	ff 27       	eor	r31, r31
 462:	59 1b       	sub	r21, r25
 464:	99 f0       	breq	.+38     	; 0x48c <__addsf3x+0x60>
 466:	59 3f       	cpi	r21, 0xF9	; 249
 468:	50 f4       	brcc	.+20     	; 0x47e <__addsf3x+0x52>
 46a:	50 3e       	cpi	r21, 0xE0	; 224
 46c:	68 f1       	brcs	.+90     	; 0x4c8 <__addsf3x+0x9c>
 46e:	1a 16       	cp	r1, r26
 470:	f0 40       	sbci	r31, 0x00	; 0
 472:	a2 2f       	mov	r26, r18
 474:	23 2f       	mov	r18, r19
 476:	34 2f       	mov	r19, r20
 478:	44 27       	eor	r20, r20
 47a:	58 5f       	subi	r21, 0xF8	; 248
 47c:	f3 cf       	rjmp	.-26     	; 0x464 <__addsf3x+0x38>
 47e:	46 95       	lsr	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
 484:	a7 95       	ror	r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	53 95       	inc	r21
 48a:	c9 f7       	brne	.-14     	; 0x47e <__addsf3x+0x52>
 48c:	7e f4       	brtc	.+30     	; 0x4ac <__addsf3x+0x80>
 48e:	1f 16       	cp	r1, r31
 490:	ba 0b       	sbc	r27, r26
 492:	62 0b       	sbc	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba f0       	brmi	.+46     	; 0x4c8 <__addsf3x+0x9c>
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__addsf3x+0x9a>
 49e:	ff 0f       	add	r31, r31
 4a0:	bb 1f       	adc	r27, r27
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	c2 f7       	brpl	.-16     	; 0x49a <__addsf3x+0x6e>
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__addsf3x+0x9c>
 4ac:	ba 0f       	add	r27, r26
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 1f       	adc	r23, r19
 4b2:	84 1f       	adc	r24, r20
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <__addsf3x+0x9c>
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__addsf3x+0x9a>
 4c4:	b0 cf       	rjmp	.-160    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 4c6:	93 95       	inc	r25
 4c8:	88 0f       	add	r24, r24
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0xa2>
 4cc:	99 27       	eor	r25, r25
 4ce:	ee 0f       	add	r30, r30
 4d0:	97 95       	ror	r25
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret

000004d6 <__cmpsf2>:
 4d6:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_cmp>
 4da:	08 f4       	brcc	.+2      	; 0x4de <__cmpsf2+0x8>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <__floatunsisf>:
 4e0:	e8 94       	clt
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__floatsisf+0x12>

000004e4 <__floatsisf>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__floatsisf+0x12>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	99 23       	and	r25, r25
 4f8:	a9 f0       	breq	.+42     	; 0x524 <__floatsisf+0x40>
 4fa:	f9 2f       	mov	r31, r25
 4fc:	96 e9       	ldi	r25, 0x96	; 150
 4fe:	bb 27       	eor	r27, r27
 500:	93 95       	inc	r25
 502:	f6 95       	lsr	r31
 504:	87 95       	ror	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f1 11       	cpse	r31, r1
 50e:	f8 cf       	rjmp	.-16     	; 0x500 <__floatsisf+0x1c>
 510:	fa f4       	brpl	.+62     	; 0x550 <__floatsisf+0x6c>
 512:	bb 0f       	add	r27, r27
 514:	11 f4       	brne	.+4      	; 0x51a <__floatsisf+0x36>
 516:	60 ff       	sbrs	r22, 0
 518:	1b c0       	rjmp	.+54     	; 0x550 <__floatsisf+0x6c>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	16 c0       	rjmp	.+44     	; 0x550 <__floatsisf+0x6c>
 524:	88 23       	and	r24, r24
 526:	11 f0       	breq	.+4      	; 0x52c <__floatsisf+0x48>
 528:	96 e9       	ldi	r25, 0x96	; 150
 52a:	11 c0       	rjmp	.+34     	; 0x54e <__floatsisf+0x6a>
 52c:	77 23       	and	r23, r23
 52e:	21 f0       	breq	.+8      	; 0x538 <__floatsisf+0x54>
 530:	9e e8       	ldi	r25, 0x8E	; 142
 532:	87 2f       	mov	r24, r23
 534:	76 2f       	mov	r23, r22
 536:	05 c0       	rjmp	.+10     	; 0x542 <__floatsisf+0x5e>
 538:	66 23       	and	r22, r22
 53a:	71 f0       	breq	.+28     	; 0x558 <__floatsisf+0x74>
 53c:	96 e8       	ldi	r25, 0x86	; 134
 53e:	86 2f       	mov	r24, r22
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	2a f0       	brmi	.+10     	; 0x550 <__floatsisf+0x6c>
 546:	9a 95       	dec	r25
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	da f7       	brpl	.-10     	; 0x546 <__floatsisf+0x62>
 550:	88 0f       	add	r24, r24
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__fp_cmp>:
 55a:	99 0f       	add	r25, r25
 55c:	00 08       	sbc	r0, r0
 55e:	55 0f       	add	r21, r21
 560:	aa 0b       	sbc	r26, r26
 562:	e0 e8       	ldi	r30, 0x80	; 128
 564:	fe ef       	ldi	r31, 0xFE	; 254
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	e8 07       	cpc	r30, r24
 56c:	f9 07       	cpc	r31, r25
 56e:	c0 f0       	brcs	.+48     	; 0x5a0 <__fp_cmp+0x46>
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fp_cmp+0x46>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	95 0b       	sbc	r25, r21
 582:	39 f4       	brne	.+14     	; 0x592 <__fp_cmp+0x38>
 584:	0a 26       	eor	r0, r26
 586:	61 f0       	breq	.+24     	; 0x5a0 <__fp_cmp+0x46>
 588:	23 2b       	or	r18, r19
 58a:	24 2b       	or	r18, r20
 58c:	25 2b       	or	r18, r21
 58e:	21 f4       	brne	.+8      	; 0x598 <__fp_cmp+0x3e>
 590:	08 95       	ret
 592:	0a 26       	eor	r0, r26
 594:	09 f4       	brne	.+2      	; 0x598 <__fp_cmp+0x3e>
 596:	a1 40       	sbci	r26, 0x01	; 1
 598:	a6 95       	lsr	r26
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	81 1d       	adc	r24, r1
 59e:	81 1d       	adc	r24, r1
 5a0:	08 95       	ret

000005a2 <__fp_inf>:
 5a2:	97 f9       	bld	r25, 7
 5a4:	9f 67       	ori	r25, 0x7F	; 127
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	08 95       	ret

000005ae <__fp_nan>:
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	80 ec       	ldi	r24, 0xC0	; 192
 5b2:	08 95       	ret

000005b4 <__fp_pscA>:
 5b4:	00 24       	eor	r0, r0
 5b6:	0a 94       	dec	r0
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	18 06       	cpc	r1, r24
 5be:	09 06       	cpc	r0, r25
 5c0:	08 95       	ret

000005c2 <__fp_pscB>:
 5c2:	00 24       	eor	r0, r0
 5c4:	0a 94       	dec	r0
 5c6:	12 16       	cp	r1, r18
 5c8:	13 06       	cpc	r1, r19
 5ca:	14 06       	cpc	r1, r20
 5cc:	05 06       	cpc	r0, r21
 5ce:	08 95       	ret

000005d0 <__fp_round>:
 5d0:	09 2e       	mov	r0, r25
 5d2:	03 94       	inc	r0
 5d4:	00 0c       	add	r0, r0
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0xc>
 5d8:	88 23       	and	r24, r24
 5da:	52 f0       	brmi	.+20     	; 0x5f0 <__fp_round+0x20>
 5dc:	bb 0f       	add	r27, r27
 5de:	40 f4       	brcc	.+16     	; 0x5f0 <__fp_round+0x20>
 5e0:	bf 2b       	or	r27, r31
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0x18>
 5e4:	60 ff       	sbrs	r22, 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__fp_round+0x20>
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__fp_split3>:
 5f2:	57 fd       	sbrc	r21, 7
 5f4:	90 58       	subi	r25, 0x80	; 128
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	59 f0       	breq	.+22     	; 0x612 <__fp_splitA+0x10>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	71 f0       	breq	.+28     	; 0x61c <__fp_splitA+0x1a>
 600:	47 95       	ror	r20

00000602 <__fp_splitA>:
 602:	88 0f       	add	r24, r24
 604:	97 fb       	bst	r25, 7
 606:	99 1f       	adc	r25, r25
 608:	61 f0       	breq	.+24     	; 0x622 <__fp_splitA+0x20>
 60a:	9f 3f       	cpi	r25, 0xFF	; 255
 60c:	79 f0       	breq	.+30     	; 0x62c <__fp_splitA+0x2a>
 60e:	87 95       	ror	r24
 610:	08 95       	ret
 612:	12 16       	cp	r1, r18
 614:	13 06       	cpc	r1, r19
 616:	14 06       	cpc	r1, r20
 618:	55 1f       	adc	r21, r21
 61a:	f2 cf       	rjmp	.-28     	; 0x600 <__fp_split3+0xe>
 61c:	46 95       	lsr	r20
 61e:	f1 df       	rcall	.-30     	; 0x602 <__fp_splitA>
 620:	08 c0       	rjmp	.+16     	; 0x632 <__fp_splitA+0x30>
 622:	16 16       	cp	r1, r22
 624:	17 06       	cpc	r1, r23
 626:	18 06       	cpc	r1, r24
 628:	99 1f       	adc	r25, r25
 62a:	f1 cf       	rjmp	.-30     	; 0x60e <__fp_splitA+0xc>
 62c:	86 95       	lsr	r24
 62e:	71 05       	cpc	r23, r1
 630:	61 05       	cpc	r22, r1
 632:	08 94       	sec
 634:	08 95       	ret

00000636 <__fp_zero>:
 636:	e8 94       	clt

00000638 <__fp_szero>:
 638:	bb 27       	eor	r27, r27
 63a:	66 27       	eor	r22, r22
 63c:	77 27       	eor	r23, r23
 63e:	cb 01       	movw	r24, r22
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__gesf2>:
 644:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_cmp>
 648:	08 f4       	brcc	.+2      	; 0x64c <__gesf2+0x8>
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__mulsf3>:
 64e:	0e 94 3a 03 	call	0x674	; 0x674 <__mulsf3x>
 652:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>
 656:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscA>
 65a:	38 f0       	brcs	.+14     	; 0x66a <__mulsf3+0x1c>
 65c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_pscB>
 660:	20 f0       	brcs	.+8      	; 0x66a <__mulsf3+0x1c>
 662:	95 23       	and	r25, r21
 664:	11 f0       	breq	.+4      	; 0x66a <__mulsf3+0x1c>
 666:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 66a:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 66e:	11 24       	eor	r1, r1
 670:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>

00000674 <__mulsf3x>:
 674:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 678:	70 f3       	brcs	.-36     	; 0x656 <__mulsf3+0x8>

0000067a <__mulsf3_pse>:
 67a:	95 9f       	mul	r25, r21
 67c:	c1 f3       	breq	.-16     	; 0x66e <__mulsf3+0x20>
 67e:	95 0f       	add	r25, r21
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	55 1f       	adc	r21, r21
 684:	62 9f       	mul	r22, r18
 686:	f0 01       	movw	r30, r0
 688:	72 9f       	mul	r23, r18
 68a:	bb 27       	eor	r27, r27
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	63 9f       	mul	r22, r19
 692:	aa 27       	eor	r26, r26
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	aa 1f       	adc	r26, r26
 69a:	64 9f       	mul	r22, r20
 69c:	66 27       	eor	r22, r22
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	66 1f       	adc	r22, r22
 6a4:	82 9f       	mul	r24, r18
 6a6:	22 27       	eor	r18, r18
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	73 9f       	mul	r23, r19
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	83 9f       	mul	r24, r19
 6b8:	a0 0d       	add	r26, r0
 6ba:	61 1d       	adc	r22, r1
 6bc:	22 1f       	adc	r18, r18
 6be:	74 9f       	mul	r23, r20
 6c0:	33 27       	eor	r19, r19
 6c2:	a0 0d       	add	r26, r0
 6c4:	61 1d       	adc	r22, r1
 6c6:	23 1f       	adc	r18, r19
 6c8:	84 9f       	mul	r24, r20
 6ca:	60 0d       	add	r22, r0
 6cc:	21 1d       	adc	r18, r1
 6ce:	82 2f       	mov	r24, r18
 6d0:	76 2f       	mov	r23, r22
 6d2:	6a 2f       	mov	r22, r26
 6d4:	11 24       	eor	r1, r1
 6d6:	9f 57       	subi	r25, 0x7F	; 127
 6d8:	50 40       	sbci	r21, 0x00	; 0
 6da:	9a f0       	brmi	.+38     	; 0x702 <__mulsf3_pse+0x88>
 6dc:	f1 f0       	breq	.+60     	; 0x71a <__mulsf3_pse+0xa0>
 6de:	88 23       	and	r24, r24
 6e0:	4a f0       	brmi	.+18     	; 0x6f4 <__mulsf3_pse+0x7a>
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	bb 1f       	adc	r27, r27
 6e8:	66 1f       	adc	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__mulsf3_pse+0x64>
 6f4:	9e 3f       	cpi	r25, 0xFE	; 254
 6f6:	51 05       	cpc	r21, r1
 6f8:	80 f0       	brcs	.+32     	; 0x71a <__mulsf3_pse+0xa0>
 6fa:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 6fe:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	e4 f3       	brlt	.-8      	; 0x6fe <__mulsf3_pse+0x84>
 706:	98 3e       	cpi	r25, 0xE8	; 232
 708:	d4 f3       	brlt	.-12     	; 0x6fe <__mulsf3_pse+0x84>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	e7 95       	ror	r30
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c1 f7       	brne	.-16     	; 0x70a <__mulsf3_pse+0x90>
 71a:	fe 2b       	or	r31, r30
 71c:	88 0f       	add	r24, r24
 71e:	91 1d       	adc	r25, r1
 720:	96 95       	lsr	r25
 722:	87 95       	ror	r24
 724:	97 f9       	bld	r25, 7
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
