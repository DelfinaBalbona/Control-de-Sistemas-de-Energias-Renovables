
Power_converter_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000724  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080010e  0080010e  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b87  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000768  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000572  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c0  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000031fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  9e:	0c 94 90 03 	jmp	0x720	; 0x720 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <md_i>:
		I = I_ant;
	}
	I_ant = I;
	
	return salida;
}
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__subsf3>
  b2:	6b 01       	movw	r12, r22
  b4:	7c 01       	movw	r14, r24
  b6:	2f e6       	ldi	r18, 0x6F	; 111
  b8:	32 e1       	ldi	r19, 0x12	; 18
  ba:	43 e8       	ldi	r20, 0x83	; 131
  bc:	5a e3       	ldi	r21, 0x3A	; 58
  be:	0e 94 1e 03 	call	0x63c	; 0x63c <__gesf2>
  c2:	18 16       	cp	r1, r24
  c4:	34 f4       	brge	.+12     	; 0xd2 <md_i+0x2c>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
  ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
  d2:	2f e6       	ldi	r18, 0x6F	; 111
  d4:	32 e1       	ldi	r19, 0x12	; 18
  d6:	43 e8       	ldi	r20, 0x83	; 131
  d8:	5a eb       	ldi	r21, 0xBA	; 186
  da:	c7 01       	movw	r24, r14
  dc:	b6 01       	movw	r22, r12
  de:	0e 94 67 02 	call	0x4ce	; 0x4ce <__cmpsf2>
  e2:	88 23       	and	r24, r24
  e4:	24 f4       	brge	.+8      	; 0xee <md_i+0x48>
  e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
  ea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
  ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
  f2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	cf 90       	pop	r12
  fe:	08 95       	ret

00000100 <medicion_variables>:

/********************************/
/*** Medición y procesamiento ***/
/********************************/

void medicion_variables(void){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29

	outputCurrent = adc_buffer[0]*outputCurrentGain;
 104:	c9 e2       	ldi	r28, 0x29	; 41
 106:	d1 e0       	ldi	r29, 0x01	; 1
 108:	68 81       	ld	r22, Y
 10a:	79 81       	ldd	r23, Y+1	; 0x01
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__floatunsisf>
 114:	2c ec       	ldi	r18, 0xCC	; 204
 116:	35 e4       	ldi	r19, 0x45	; 69
 118:	4f ec       	ldi	r20, 0xCF	; 207
 11a:	5b e3       	ldi	r21, 0x3B	; 59
 11c:	0e 94 23 03 	call	0x646	; 0x646 <__mulsf3>
 120:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <outputCurrent>
 124:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <outputCurrent+0x1>
 128:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <outputCurrent+0x2>
 12c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <outputCurrent+0x3>
	outputVoltage = adc_buffer[1]*outputVoltageGain;
 130:	6a 81       	ldd	r22, Y+2	; 0x02
 132:	7b 81       	ldd	r23, Y+3	; 0x03
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__floatunsisf>
 13c:	2e ee       	ldi	r18, 0xEE	; 238
 13e:	33 ee       	ldi	r19, 0xE3	; 227
 140:	40 ea       	ldi	r20, 0xA0	; 160
 142:	5c e3       	ldi	r21, 0x3C	; 60
 144:	0e 94 23 03 	call	0x646	; 0x646 <__mulsf3>
 148:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <outputVoltage>
 14c:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <outputVoltage+0x1>
 150:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <outputVoltage+0x2>
 154:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <outputVoltage+0x3>
	inputCurrent = adc_buffer[2]*inputCurrentGain;
 158:	6c 81       	ldd	r22, Y+4	; 0x04
 15a:	7d 81       	ldd	r23, Y+5	; 0x05
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__floatunsisf>
 164:	21 e3       	ldi	r18, 0x31	; 49
 166:	3b e1       	ldi	r19, 0x1B	; 27
 168:	4d e8       	ldi	r20, 0x8D	; 141
 16a:	5b e3       	ldi	r21, 0x3B	; 59
 16c:	0e 94 23 03 	call	0x646	; 0x646 <__mulsf3>
 170:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <inputCurrent>
 174:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <inputCurrent+0x1>
 178:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <inputCurrent+0x2>
 17c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <inputCurrent+0x3>
	inputVoltage = adc_buffer[3]*inputVoltageGain;
 180:	6e 81       	ldd	r22, Y+6	; 0x06
 182:	7f 81       	ldd	r23, Y+7	; 0x07
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__floatunsisf>
 18c:	2d e5       	ldi	r18, 0x5D	; 93
 18e:	34 e7       	ldi	r19, 0x74	; 116
 190:	41 e5       	ldi	r20, 0x51	; 81
 192:	5d e3       	ldi	r21, 0x3D	; 61
 194:	0e 94 23 03 	call	0x646	; 0x646 <__mulsf3>
 198:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <inputVoltage>
 19c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <inputVoltage+0x1>
 1a0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <inputVoltage+0x2>
 1a4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <inputVoltage+0x3>
	
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_13>:
}


/* Ejecución 5kHz del lazo de control */

ISR(TIMER1_OVF_vect){//TIMER1_COMPA_vect) {
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	
	medicion_variables();
 1d0:	0e 94 80 00 	call	0x100	; 0x100 <medicion_variables>

	cli();
 1d4:	f8 94       	cli
		DUTY = (uint16_t)(pi_i(Iref, outputCurrent)*1599);
	#elif CONTROLADOR == 2
		Iref = pi_v(Vref, outputVoltage);
		DUTY = (uint16_t)(pi_i(Iref, outputCurrent)*1599);
	#elif CONTROLADOR == 3
		DUTY = md_i(Iref, outputCurrent)*1599;
 1d6:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <outputCurrent>
 1da:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <outputCurrent+0x1>
 1de:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <outputCurrent+0x2>
 1e2:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <outputCurrent+0x3>
 1e6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <Iref>
 1ea:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <Iref+0x1>
 1ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Iref+0x2>
 1f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Iref+0x3>
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <md_i>
 1fa:	2f e3       	ldi	r18, 0x3F	; 63
 1fc:	36 e0       	ldi	r19, 0x06	; 6
 1fe:	ac 01       	movw	r20, r24
 200:	42 9f       	mul	r20, r18
 202:	c0 01       	movw	r24, r0
 204:	43 9f       	mul	r20, r19
 206:	90 0d       	add	r25, r0
 208:	52 9f       	mul	r21, r18
 20a:	90 0d       	add	r25, r0
 20c:	11 24       	eor	r1, r1
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
		Vref = MPPT_IC(inputVoltage, inputCurrent);
		Iref = pi_v(Vref, inputVoltage);
		DUTY = (uint16_t)(pi_i(Iref, inputCurrent)*1599);
	#endif
	
	if (DUTY > dutyMax) DUTY = dutyMax;
 216:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DUTY>
 21a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DUTY+0x1>
 21e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dutyMax>
 222:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <dutyMax+0x1>
 226:	82 17       	cp	r24, r18
 228:	93 07       	cpc	r25, r19
 22a:	20 f4       	brcc	.+8      	; 0x234 <__vector_13+0x86>
 22c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
	if (DUTY < dutyMin) DUTY = dutyMin;
 234:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DUTY>
 238:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DUTY+0x1>
 23c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyMin>
 240:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyMin+0x1>
 244:	28 17       	cp	r18, r24
 246:	39 07       	cpc	r19, r25
 248:	20 f4       	brcc	.+8      	; 0x252 <__vector_13+0xa4>
 24a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DUTY+0x1>
 24e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DUTY>
	
	OCR1B = DUTY;                     // Actualizo ciclo de trabajo en generador PWM
 252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <DUTY>
 256:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <DUTY+0x1>
 25a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 25e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	sei();
 262:	78 94       	sei
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <configurar_PWM>:
/*** Funciones de configuración ***/
/**********************************/

/* Configuración del generador de PWM a 1kHz */
void configurar_PWM(void){
	cli();									// Deshabilitar interrupciones globales
 286:	f8 94       	cli
	DDRB |= (1<<DDB2);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1B1)|(0 << WGM10)|(1 << WGM11);// Configurar el Timer1 en modo Phase Correct PWM Mode y prescaler de 1
 28e:	82 e2       	ldi	r24, 0x22	; 34
 290:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13)|(0 << WGM12) | (0 << CS11)|(1 << CS10);
 294:	81 e1       	ldi	r24, 0x11	; 17
 296:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 1599;
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	96 e0       	ldi	r25, 0x06	; 6
 29e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1B = 1000;							// Establecer el valor de comparación OCR1B
 2a6:	88 ee       	ldi	r24, 0xE8	; 232
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2ae:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIMSK1 = (1 << TOIE1);					// Habilitar la interrupción de OVF
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();									// Habilitar interrupciones globales
 2b8:	78 94       	sei
 2ba:	08 95       	ret

000002bc <configurar_ADC>:


void configurar_ADC(void)
{
	//ADC seteado para medir y redisparar con el timer1
	ADMUX = (1 << REFS0) | (0 << ADLAR); //Referencia AVcc; justificado a izq.
 2bc:	ec e7       	ldi	r30, 0x7C	; 124
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	80 83       	st	Z, r24
	adc_index = 0;
 2c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <adc_index>
	ADMUX |= SETADC_CHANNEL(adc_channels[adc_index]);
 2c8:	80 81       	ld	r24, Z
 2ca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ce:	20 81       	ld	r18, Z
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	82 2b       	or	r24, r18
 2d8:	80 83       	st	Z, r24
	
	//Enable start retrigger interrupt prescaler
	ADCSRB = (1 << ADTS2) | (1 << ADTS1) | (0<< ADTS0); // retrigger en 0C0A compare match
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA = (1 << ADEN) | (0 << ADSC)  |  (1 << ADATE)  | (1 <<ADIE) | (0 << ADPS0) |(1 << ADPS1) |(1 << ADPS2);
 2e0:	8e ea       	ldi	r24, 0xAE	; 174
 2e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	//DIDR0 = (1 << ADC0D); //  deshabilita buffer digital en A5
	sei();
 2e6:	78 94       	sei
 2e8:	08 95       	ret

000002ea <main>:
														LOOP MAIN
*****************************************************************************************************************************/
int main(void)
{
	// put your setup code here, to run once:
	configurar_PWM();
 2ea:	0e 94 43 01 	call	0x286	; 0x286 <configurar_PWM>
	 DDRB |= (1<<DDB3);
 2ee:	84 b1       	in	r24, 0x04	; 4
 2f0:	88 60       	ori	r24, 0x08	; 8
 2f2:	84 b9       	out	0x04, r24	; 4
	configurar_ADC();
 2f4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <configurar_ADC>
	//Serial.begin(9600);
 
    while (1) 
    {
		/* Código ejecutable cada 1s = 1000 ms */
		if (ms - lastMeasurementTime >= 1000)
 2f8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ms>
 2fc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <ms+0x1>
 300:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <ms+0x2>
 304:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <ms+0x3>
 308:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <lastMeasurementTime>
 30c:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <lastMeasurementTime+0x1>
 310:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <lastMeasurementTime+0x2>
 314:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <lastMeasurementTime+0x3>
 318:	8c 01       	movw	r16, r24
 31a:	9d 01       	movw	r18, r26
 31c:	04 1b       	sub	r16, r20
 31e:	15 0b       	sbc	r17, r21
 320:	26 0b       	sbc	r18, r22
 322:	37 0b       	sbc	r19, r23
 324:	b9 01       	movw	r22, r18
 326:	a8 01       	movw	r20, r16
 328:	48 3e       	cpi	r20, 0xE8	; 232
 32a:	53 40       	sbci	r21, 0x03	; 3
 32c:	61 05       	cpc	r22, r1
 32e:	71 05       	cpc	r23, r1
 330:	18 f3       	brcs	.-58     	; 0x2f8 <main+0xe>
		{
			lastMeasurementTime = ms;  // Actualizar el tiempo de la última muestra
 332:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <lastMeasurementTime>
 336:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <lastMeasurementTime+0x1>
 33a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <lastMeasurementTime+0x2>
 33e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <lastMeasurementTime+0x3>
 342:	da cf       	rjmp	.-76     	; 0x2f8 <main+0xe>

00000344 <__vector_21>:
/****************************************************************************************************************************
													ISR DE INTERRUPCION
*****************************************************************************************************************************/

ISR(ADC_vect)
{
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	
	if (adc_index < 3){
 35a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <adc_index>
 35e:	e3 30       	cpi	r30, 0x03	; 3
 360:	20 f5       	brcc	.+72     	; 0x3aa <__vector_21+0x66>
		adc_buffer[adc_index] = ADC;
 362:	ae 2f       	mov	r26, r30
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 36a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 36e:	aa 0f       	add	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	a7 5d       	subi	r26, 0xD7	; 215
 374:	be 4f       	sbci	r27, 0xFE	; 254
 376:	8d 93       	st	X+, r24
 378:	9c 93       	st	X, r25
		adc_index++;
 37a:	ef 5f       	subi	r30, 0xFF	; 255
 37c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <adc_index>
		ADMUX = SETADC_CHANNEL(adc_channels[adc_index]);
 380:	ac e7       	ldi	r26, 0x7C	; 124
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	9c 91       	ld	r25, X
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e0 50       	subi	r30, 0x00	; 0
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	80 81       	ld	r24, Z
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	8c 93       	st	X, r24
		ADCSRA |= (1 << ADSC);
 396:	ea e7       	ldi	r30, 0x7A	; 122
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	80 83       	st	Z, r24
		PORTB ^= (1<<PORTB3);
 3a0:	95 b1       	in	r25, 0x05	; 5
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	89 27       	eor	r24, r25
 3a6:	85 b9       	out	0x05, r24	; 5
 3a8:	1a c0       	rjmp	.+52     	; 0x3de <__vector_21+0x9a>
	} else {
		adc_buffer[adc_index] = ADC;
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 3b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	e7 5d       	subi	r30, 0xD7	; 215
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	91 83       	std	Z+1, r25	; 0x01
 3be:	80 83       	st	Z, r24
		adc_index = 0;
 3c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <adc_index>
		ADMUX = SETADC_CHANNEL(adc_channels[adc_index]);
 3c4:	ec e7       	ldi	r30, 0x7C	; 124
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	90 81       	ld	r25, Z
 3ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ce:	90 7f       	andi	r25, 0xF0	; 240
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	89 2b       	or	r24, r25
 3d4:	80 83       	st	Z, r24
		PORTB ^= (1<<PORTB3);
 3d6:	95 b1       	in	r25, 0x05	; 5
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	89 27       	eor	r24, r25
 3dc:	85 b9       	out	0x05, r24	; 5
	}
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <__subsf3>:
 3f4:	50 58       	subi	r21, 0x80	; 128

000003f6 <__addsf3>:
 3f6:	bb 27       	eor	r27, r27
 3f8:	aa 27       	eor	r26, r26
 3fa:	0e 94 12 02 	call	0x424	; 0x424 <__addsf3x>
 3fe:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 402:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 406:	38 f0       	brcs	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 408:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 40c:	20 f0       	brcs	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40e:	39 f4       	brne	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	9f 3f       	cpi	r25, 0xFF	; 255
 412:	19 f4       	brne	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	26 f4       	brtc	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 41a:	0e f4       	brtc	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	e0 95       	com	r30
 41e:	e7 fb       	bst	r30, 7
 420:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>

00000424 <__addsf3x>:
 424:	e9 2f       	mov	r30, r25
 426:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 42a:	58 f3       	brcs	.-42     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 42c:	ba 17       	cp	r27, r26
 42e:	62 07       	cpc	r22, r18
 430:	73 07       	cpc	r23, r19
 432:	84 07       	cpc	r24, r20
 434:	95 07       	cpc	r25, r21
 436:	20 f0       	brcs	.+8      	; 0x440 <__addsf3x+0x1c>
 438:	79 f4       	brne	.+30     	; 0x458 <__addsf3x+0x34>
 43a:	a6 f5       	brtc	.+104    	; 0x4a4 <__addsf3x+0x80>
 43c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 440:	0e f4       	brtc	.+2      	; 0x444 <__addsf3x+0x20>
 442:	e0 95       	com	r30
 444:	0b 2e       	mov	r0, r27
 446:	ba 2f       	mov	r27, r26
 448:	a0 2d       	mov	r26, r0
 44a:	0b 01       	movw	r0, r22
 44c:	b9 01       	movw	r22, r18
 44e:	90 01       	movw	r18, r0
 450:	0c 01       	movw	r0, r24
 452:	ca 01       	movw	r24, r20
 454:	a0 01       	movw	r20, r0
 456:	11 24       	eor	r1, r1
 458:	ff 27       	eor	r31, r31
 45a:	59 1b       	sub	r21, r25
 45c:	99 f0       	breq	.+38     	; 0x484 <__addsf3x+0x60>
 45e:	59 3f       	cpi	r21, 0xF9	; 249
 460:	50 f4       	brcc	.+20     	; 0x476 <__addsf3x+0x52>
 462:	50 3e       	cpi	r21, 0xE0	; 224
 464:	68 f1       	brcs	.+90     	; 0x4c0 <__addsf3x+0x9c>
 466:	1a 16       	cp	r1, r26
 468:	f0 40       	sbci	r31, 0x00	; 0
 46a:	a2 2f       	mov	r26, r18
 46c:	23 2f       	mov	r18, r19
 46e:	34 2f       	mov	r19, r20
 470:	44 27       	eor	r20, r20
 472:	58 5f       	subi	r21, 0xF8	; 248
 474:	f3 cf       	rjmp	.-26     	; 0x45c <__addsf3x+0x38>
 476:	46 95       	lsr	r20
 478:	37 95       	ror	r19
 47a:	27 95       	ror	r18
 47c:	a7 95       	ror	r26
 47e:	f0 40       	sbci	r31, 0x00	; 0
 480:	53 95       	inc	r21
 482:	c9 f7       	brne	.-14     	; 0x476 <__addsf3x+0x52>
 484:	7e f4       	brtc	.+30     	; 0x4a4 <__addsf3x+0x80>
 486:	1f 16       	cp	r1, r31
 488:	ba 0b       	sbc	r27, r26
 48a:	62 0b       	sbc	r22, r18
 48c:	73 0b       	sbc	r23, r19
 48e:	84 0b       	sbc	r24, r20
 490:	ba f0       	brmi	.+46     	; 0x4c0 <__addsf3x+0x9c>
 492:	91 50       	subi	r25, 0x01	; 1
 494:	a1 f0       	breq	.+40     	; 0x4be <__addsf3x+0x9a>
 496:	ff 0f       	add	r31, r31
 498:	bb 1f       	adc	r27, r27
 49a:	66 1f       	adc	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	c2 f7       	brpl	.-16     	; 0x492 <__addsf3x+0x6e>
 4a2:	0e c0       	rjmp	.+28     	; 0x4c0 <__addsf3x+0x9c>
 4a4:	ba 0f       	add	r27, r26
 4a6:	62 1f       	adc	r22, r18
 4a8:	73 1f       	adc	r23, r19
 4aa:	84 1f       	adc	r24, r20
 4ac:	48 f4       	brcc	.+18     	; 0x4c0 <__addsf3x+0x9c>
 4ae:	87 95       	ror	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	b7 95       	ror	r27
 4b6:	f7 95       	ror	r31
 4b8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ba:	08 f0       	brcs	.+2      	; 0x4be <__addsf3x+0x9a>
 4bc:	b0 cf       	rjmp	.-160    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 4be:	93 95       	inc	r25
 4c0:	88 0f       	add	r24, r24
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__addsf3x+0xa2>
 4c4:	99 27       	eor	r25, r25
 4c6:	ee 0f       	add	r30, r30
 4c8:	97 95       	ror	r25
 4ca:	87 95       	ror	r24
 4cc:	08 95       	ret

000004ce <__cmpsf2>:
 4ce:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_cmp>
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__cmpsf2+0x8>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret

000004d8 <__floatunsisf>:
 4d8:	e8 94       	clt
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__floatsisf+0x12>

000004dc <__floatsisf>:
 4dc:	97 fb       	bst	r25, 7
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__floatsisf+0x12>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	99 23       	and	r25, r25
 4f0:	a9 f0       	breq	.+42     	; 0x51c <__floatsisf+0x40>
 4f2:	f9 2f       	mov	r31, r25
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	bb 27       	eor	r27, r27
 4f8:	93 95       	inc	r25
 4fa:	f6 95       	lsr	r31
 4fc:	87 95       	ror	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f1 11       	cpse	r31, r1
 506:	f8 cf       	rjmp	.-16     	; 0x4f8 <__floatsisf+0x1c>
 508:	fa f4       	brpl	.+62     	; 0x548 <__floatsisf+0x6c>
 50a:	bb 0f       	add	r27, r27
 50c:	11 f4       	brne	.+4      	; 0x512 <__floatsisf+0x36>
 50e:	60 ff       	sbrs	r22, 0
 510:	1b c0       	rjmp	.+54     	; 0x548 <__floatsisf+0x6c>
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__floatsisf+0x6c>
 51c:	88 23       	and	r24, r24
 51e:	11 f0       	breq	.+4      	; 0x524 <__floatsisf+0x48>
 520:	96 e9       	ldi	r25, 0x96	; 150
 522:	11 c0       	rjmp	.+34     	; 0x546 <__floatsisf+0x6a>
 524:	77 23       	and	r23, r23
 526:	21 f0       	breq	.+8      	; 0x530 <__floatsisf+0x54>
 528:	9e e8       	ldi	r25, 0x8E	; 142
 52a:	87 2f       	mov	r24, r23
 52c:	76 2f       	mov	r23, r22
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__floatsisf+0x5e>
 530:	66 23       	and	r22, r22
 532:	71 f0       	breq	.+28     	; 0x550 <__floatsisf+0x74>
 534:	96 e8       	ldi	r25, 0x86	; 134
 536:	86 2f       	mov	r24, r22
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	2a f0       	brmi	.+10     	; 0x548 <__floatsisf+0x6c>
 53e:	9a 95       	dec	r25
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	da f7       	brpl	.-10     	; 0x53e <__floatsisf+0x62>
 548:	88 0f       	add	r24, r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__fp_cmp>:
 552:	99 0f       	add	r25, r25
 554:	00 08       	sbc	r0, r0
 556:	55 0f       	add	r21, r21
 558:	aa 0b       	sbc	r26, r26
 55a:	e0 e8       	ldi	r30, 0x80	; 128
 55c:	fe ef       	ldi	r31, 0xFE	; 254
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	e8 07       	cpc	r30, r24
 564:	f9 07       	cpc	r31, r25
 566:	c0 f0       	brcs	.+48     	; 0x598 <__fp_cmp+0x46>
 568:	12 16       	cp	r1, r18
 56a:	13 06       	cpc	r1, r19
 56c:	e4 07       	cpc	r30, r20
 56e:	f5 07       	cpc	r31, r21
 570:	98 f0       	brcs	.+38     	; 0x598 <__fp_cmp+0x46>
 572:	62 1b       	sub	r22, r18
 574:	73 0b       	sbc	r23, r19
 576:	84 0b       	sbc	r24, r20
 578:	95 0b       	sbc	r25, r21
 57a:	39 f4       	brne	.+14     	; 0x58a <__fp_cmp+0x38>
 57c:	0a 26       	eor	r0, r26
 57e:	61 f0       	breq	.+24     	; 0x598 <__fp_cmp+0x46>
 580:	23 2b       	or	r18, r19
 582:	24 2b       	or	r18, r20
 584:	25 2b       	or	r18, r21
 586:	21 f4       	brne	.+8      	; 0x590 <__fp_cmp+0x3e>
 588:	08 95       	ret
 58a:	0a 26       	eor	r0, r26
 58c:	09 f4       	brne	.+2      	; 0x590 <__fp_cmp+0x3e>
 58e:	a1 40       	sbci	r26, 0x01	; 1
 590:	a6 95       	lsr	r26
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	81 1d       	adc	r24, r1
 596:	81 1d       	adc	r24, r1
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__gesf2>:
 63c:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_cmp>
 640:	08 f4       	brcc	.+2      	; 0x644 <__gesf2+0x8>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	08 95       	ret

00000646 <__mulsf3>:
 646:	0e 94 36 03 	call	0x66c	; 0x66c <__mulsf3x>
 64a:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 64e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 652:	38 f0       	brcs	.+14     	; 0x662 <__mulsf3+0x1c>
 654:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 658:	20 f0       	brcs	.+8      	; 0x662 <__mulsf3+0x1c>
 65a:	95 23       	and	r25, r21
 65c:	11 f0       	breq	.+4      	; 0x662 <__mulsf3+0x1c>
 65e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 662:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 666:	11 24       	eor	r1, r1
 668:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>

0000066c <__mulsf3x>:
 66c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 670:	70 f3       	brcs	.-36     	; 0x64e <__mulsf3+0x8>

00000672 <__mulsf3_pse>:
 672:	95 9f       	mul	r25, r21
 674:	c1 f3       	breq	.-16     	; 0x666 <__mulsf3+0x20>
 676:	95 0f       	add	r25, r21
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	55 1f       	adc	r21, r21
 67c:	62 9f       	mul	r22, r18
 67e:	f0 01       	movw	r30, r0
 680:	72 9f       	mul	r23, r18
 682:	bb 27       	eor	r27, r27
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	63 9f       	mul	r22, r19
 68a:	aa 27       	eor	r26, r26
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	aa 1f       	adc	r26, r26
 692:	64 9f       	mul	r22, r20
 694:	66 27       	eor	r22, r22
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	66 1f       	adc	r22, r22
 69c:	82 9f       	mul	r24, r18
 69e:	22 27       	eor	r18, r18
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	73 9f       	mul	r23, r19
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	83 9f       	mul	r24, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	22 1f       	adc	r18, r18
 6b6:	74 9f       	mul	r23, r20
 6b8:	33 27       	eor	r19, r19
 6ba:	a0 0d       	add	r26, r0
 6bc:	61 1d       	adc	r22, r1
 6be:	23 1f       	adc	r18, r19
 6c0:	84 9f       	mul	r24, r20
 6c2:	60 0d       	add	r22, r0
 6c4:	21 1d       	adc	r18, r1
 6c6:	82 2f       	mov	r24, r18
 6c8:	76 2f       	mov	r23, r22
 6ca:	6a 2f       	mov	r22, r26
 6cc:	11 24       	eor	r1, r1
 6ce:	9f 57       	subi	r25, 0x7F	; 127
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	9a f0       	brmi	.+38     	; 0x6fa <__mulsf3_pse+0x88>
 6d4:	f1 f0       	breq	.+60     	; 0x712 <__mulsf3_pse+0xa0>
 6d6:	88 23       	and	r24, r24
 6d8:	4a f0       	brmi	.+18     	; 0x6ec <__mulsf3_pse+0x7a>
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	bb 1f       	adc	r27, r27
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__mulsf3_pse+0x64>
 6ec:	9e 3f       	cpi	r25, 0xFE	; 254
 6ee:	51 05       	cpc	r21, r1
 6f0:	80 f0       	brcs	.+32     	; 0x712 <__mulsf3_pse+0xa0>
 6f2:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 6f6:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	e4 f3       	brlt	.-8      	; 0x6f6 <__mulsf3_pse+0x84>
 6fe:	98 3e       	cpi	r25, 0xE8	; 232
 700:	d4 f3       	brlt	.-12     	; 0x6f6 <__mulsf3_pse+0x84>
 702:	86 95       	lsr	r24
 704:	77 95       	ror	r23
 706:	67 95       	ror	r22
 708:	b7 95       	ror	r27
 70a:	f7 95       	ror	r31
 70c:	e7 95       	ror	r30
 70e:	9f 5f       	subi	r25, 0xFF	; 255
 710:	c1 f7       	brne	.-16     	; 0x702 <__mulsf3_pse+0x90>
 712:	fe 2b       	or	r31, r30
 714:	88 0f       	add	r24, r24
 716:	91 1d       	adc	r25, r1
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <_exit>:
 720:	f8 94       	cli

00000722 <__stop_program>:
 722:	ff cf       	rjmp	.-2      	; 0x722 <__stop_program>
