
TP2_ParteD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000810  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ab  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031c  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  00001e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  9e:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupTimer>:
float Ki = -2.5;
float h = 0.01;
// Inicializamos el timer para la interrupción
void setupTimer() {
	// Configuramos el Timer/Counter 1
	TCCR1A = 0; // Modo normal
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12); // Modo CTC (Clear Timer on Compare Match)
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12); // Prescaler 256
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
	OCR1A = 625; // Valor de comparación para 10 ms
  ba:	81 e7       	ldi	r24, 0x71	; 113
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Habilitamos la interrupción del Timer 1
  c6:	ef e6       	ldi	r30, 0x6F	; 111
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <setupADC>:
}

// Configuramos el ADC
void setupADC() {
	ADMUX = (1 << REFS0); // Referencia de voltaje AVcc
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // Habilitamos el ADC y configuramos el prescaler a 64
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	08 95       	ret

000000e0 <setup>:
}

// Configuramos el pin PWM y los pines analógicos
void setup() {
	// Configuramos el pin PWM como salida
	DDRD |= (1 << PWM_PIN); // Configuramos D3 como salida
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8a b9       	out	0x0a, r24	; 10
	
	// Inicializamos el ADC
	setupADC();
  e6:	0e 94 69 00 	call	0xd2	; 0xd2 <setupADC>
	
	// Inicializamos el timer
	setupTimer();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	
	// Habilitamos las interrupciones globalmente
	sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <__vector_11>:
}

// Función de interrupción del Timer 1
ISR(TIMER1_COMPA_vect) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	// Leemos los valores de los pines analógicos directamente
	// Leemos A0
	ADMUX = (ADMUX & 0xF0) | (PIN_A0 & 0x0F); // Seleccionamos A0
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciamos la conversión
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperamos a que la conversión termine
 128:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 12c:	86 fd       	sbrc	r24, 6
 12e:	fc cf       	rjmp	.-8      	; 0x128 <__vector_11+0x36>
	Im = ADC * 5 / 255; // Obtenemos el valor leído
 130:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 134:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 138:	c9 01       	movw	r24, r18
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	28 0f       	add	r18, r24
 144:	39 1f       	adc	r19, r25
 146:	a1 e8       	ldi	r26, 0x81	; 129
 148:	b0 e8       	ldi	r27, 0x80	; 128
 14a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__umulhisi3>
 14e:	88 0f       	add	r24, r24
 150:	89 2f       	mov	r24, r25
 152:	88 1f       	adc	r24, r24
 154:	99 0b       	sbc	r25, r25
 156:	91 95       	neg	r25
 158:	bc 01       	movw	r22, r24
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 38 02 	call	0x470	; 0x470 <__floatunsisf>
 162:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Im>
 166:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Im+0x1>
 16a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Im+0x2>
 16e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Im+0x3>

	// Leemos A1
	ADMUX = (ADMUX & 0xF0) | (PIN_A1 & 0x0F); // Seleccionamos A1
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciamos la conversión
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperamos a que la conversión termine
 188:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 18c:	86 fd       	sbrc	r24, 6
 18e:	fc cf       	rjmp	.-8      	; 0x188 <__vector_11+0x96>
	Vf = ADC; // Obtenemos el valor leído
 190:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 194:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 38 02 	call	0x470	; 0x470 <__floatunsisf>
 1a0:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <Vf>
 1a4:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <Vf+0x1>
 1a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Vf+0x2>
 1ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Vf+0x3>

	// Leemos A3
	ADMUX = (ADMUX & 0xF0) | (PIN_A3 & 0x0F); // Seleccionamos A3
 1b0:	ec e7       	ldi	r30, 0x7C	; 124
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	83 60       	ori	r24, 0x03	; 3
 1ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciamos la conversión
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperamos a que la conversión termine
 1c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1ca:	86 fd       	sbrc	r24, 6
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <__vector_11+0xd4>
	uint16_t valorA3 = ADC; // Obtenemos el valor leído
 1ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	// Leemos A4
	ADMUX = (ADMUX & 0xF0) | (PIN_A4 & 0x0F); // Seleccionamos A4
 1d6:	ec e7       	ldi	r30, 0x7C	; 124
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciamos la conversión
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperamos a que la conversión termine
 1ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1f0:	86 fd       	sbrc	r24, 6
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <__vector_11+0xfa>
	uint16_t valorA4 = ADC; // Obtenemos el valor leído
 1f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	flag = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 204:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:

// Bucle principal
int main(void) {
	setup(); // Llamamos a la función de configuración
 22a:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
	float error = 0.0;
	float P = 0.0;
	float I_S = 0.0;
	float I = 0.0;
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	c0 e0       	ldi	r28, 0x00	; 0
	float pid = 0.0;
	float Vref = 17.5;
	
	while (1) {
		if (flag == 1){
 236:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 23a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	d1 f7       	brne	.-12     	; 0x236 <main+0xc>
			error = Vref - Vm;
 242:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Vm>
 246:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <Vm+0x1>
 24a:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <Vm+0x2>
 24e:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <Vm+0x3>
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	8c e8       	ldi	r24, 0x8C	; 140
 258:	91 e4       	ldi	r25, 0x41	; 65
 25a:	0e 94 97 01 	call	0x32e	; 0x32e <__subsf3>
 25e:	6b 01       	movw	r12, r22
 260:	7c 01       	movw	r14, r24
			
			P = Kp *(error);
 262:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Kp>
 266:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Kp+0x1>
 26a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Kp+0x2>
 26e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Kp+0x3>
 272:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>
 276:	4b 01       	movw	r8, r22
 278:	5c 01       	movw	r10, r24
			I_S = h*Ki*(error) + I;
 27a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Ki>
 27e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Ki+0x1>
 282:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Ki+0x2>
 286:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Ki+0x3>
 28a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 292:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 296:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 29a:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>
 2aa:	9b 01       	movw	r18, r22
 2ac:	ac 01       	movw	r20, r24
 2ae:	60 2f       	mov	r22, r16
 2b0:	71 2f       	mov	r23, r17
 2b2:	8d 2f       	mov	r24, r29
 2b4:	9c 2f       	mov	r25, r28
 2b6:	0e 94 98 01 	call	0x330	; 0x330 <__addsf3>
 2ba:	c6 2e       	mov	r12, r22
 2bc:	d7 2e       	mov	r13, r23
 2be:	e8 2e       	mov	r14, r24
 2c0:	f9 2e       	mov	r15, r25
			
			pid = P + I;
 2c2:	a5 01       	movw	r20, r10
 2c4:	94 01       	movw	r18, r8
 2c6:	60 2f       	mov	r22, r16
 2c8:	71 2f       	mov	r23, r17
 2ca:	8d 2f       	mov	r24, r29
 2cc:	9c 2f       	mov	r25, r28
 2ce:	0e 94 98 01 	call	0x330	; 0x330 <__addsf3>
 2d2:	4b 01       	movw	r8, r22
 2d4:	5c 01       	movw	r10, r24
			
			if (pid > 1){
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e8       	ldi	r20, 0x80	; 128
 2dc:	5f e3       	ldi	r21, 0x3F	; 63
 2de:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__gesf2>
 2e2:	18 16       	cp	r1, r24
 2e4:	44 f4       	brge	.+16     	; 0x2f6 <main+0xcc>
				pid = 1;
 2e6:	0f 2e       	mov	r0, r31
 2e8:	81 2c       	mov	r8, r1
 2ea:	91 2c       	mov	r9, r1
 2ec:	f0 e8       	ldi	r31, 0x80	; 128
 2ee:	af 2e       	mov	r10, r31
 2f0:	ff e3       	ldi	r31, 0x3F	; 63
 2f2:	bf 2e       	mov	r11, r31
 2f4:	f0 2d       	mov	r31, r0
			}
			
			if (pid < 0){
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	a9 01       	movw	r20, r18
 2fc:	c5 01       	movw	r24, r10
 2fe:	b4 01       	movw	r22, r8
 300:	0e 94 04 02 	call	0x408	; 0x408 <__cmpsf2>
 304:	88 23       	and	r24, r24
 306:	1c f4       	brge	.+6      	; 0x30e <main+0xe4>
				pid = 0;
 308:	81 2c       	mov	r8, r1
 30a:	91 2c       	mov	r9, r1
 30c:	54 01       	movw	r10, r8
			}
			
			I = I_S;
			OCR0A = pid * 255; // Ajustamos el ciclo de trabajo en el registro de comparación de PWM
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	4f e7       	ldi	r20, 0x7F	; 127
 314:	53 e4       	ldi	r21, 0x43	; 67
 316:	c5 01       	movw	r24, r10
 318:	b4 01       	movw	r22, r8
 31a:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>
 31e:	0e 94 09 02 	call	0x412	; 0x412 <__fixunssfsi>
 322:	67 bd       	out	0x27, r22	; 39
			
			if (pid < 0){
				pid = 0;
			}
			
			I = I_S;
 324:	0c 2d       	mov	r16, r12
 326:	1d 2d       	mov	r17, r13
 328:	de 2d       	mov	r29, r14
 32a:	cf 2d       	mov	r28, r15
 32c:	84 cf       	rjmp	.-248    	; 0x236 <main+0xc>

0000032e <__subsf3>:
 32e:	50 58       	subi	r21, 0x80	; 128

00000330 <__addsf3>:
 330:	bb 27       	eor	r27, r27
 332:	aa 27       	eor	r26, r26
 334:	0e 94 af 01 	call	0x35e	; 0x35e <__addsf3x>
 338:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 33c:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 340:	38 f0       	brcs	.+14     	; 0x350 <__addsf3+0x20>
 342:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 346:	20 f0       	brcs	.+8      	; 0x350 <__addsf3+0x20>
 348:	39 f4       	brne	.+14     	; 0x358 <__addsf3+0x28>
 34a:	9f 3f       	cpi	r25, 0xFF	; 255
 34c:	19 f4       	brne	.+6      	; 0x354 <__addsf3+0x24>
 34e:	26 f4       	brtc	.+8      	; 0x358 <__addsf3+0x28>
 350:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 354:	0e f4       	brtc	.+2      	; 0x358 <__addsf3+0x28>
 356:	e0 95       	com	r30
 358:	e7 fb       	bst	r30, 7
 35a:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>

0000035e <__addsf3x>:
 35e:	e9 2f       	mov	r30, r25
 360:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 364:	58 f3       	brcs	.-42     	; 0x33c <__addsf3+0xc>
 366:	ba 17       	cp	r27, r26
 368:	62 07       	cpc	r22, r18
 36a:	73 07       	cpc	r23, r19
 36c:	84 07       	cpc	r24, r20
 36e:	95 07       	cpc	r25, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__addsf3x+0x1c>
 372:	79 f4       	brne	.+30     	; 0x392 <__addsf3x+0x34>
 374:	a6 f5       	brtc	.+104    	; 0x3de <__addsf3x+0x80>
 376:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 37a:	0e f4       	brtc	.+2      	; 0x37e <__addsf3x+0x20>
 37c:	e0 95       	com	r30
 37e:	0b 2e       	mov	r0, r27
 380:	ba 2f       	mov	r27, r26
 382:	a0 2d       	mov	r26, r0
 384:	0b 01       	movw	r0, r22
 386:	b9 01       	movw	r22, r18
 388:	90 01       	movw	r18, r0
 38a:	0c 01       	movw	r0, r24
 38c:	ca 01       	movw	r24, r20
 38e:	a0 01       	movw	r20, r0
 390:	11 24       	eor	r1, r1
 392:	ff 27       	eor	r31, r31
 394:	59 1b       	sub	r21, r25
 396:	99 f0       	breq	.+38     	; 0x3be <__addsf3x+0x60>
 398:	59 3f       	cpi	r21, 0xF9	; 249
 39a:	50 f4       	brcc	.+20     	; 0x3b0 <__addsf3x+0x52>
 39c:	50 3e       	cpi	r21, 0xE0	; 224
 39e:	68 f1       	brcs	.+90     	; 0x3fa <__addsf3x+0x9c>
 3a0:	1a 16       	cp	r1, r26
 3a2:	f0 40       	sbci	r31, 0x00	; 0
 3a4:	a2 2f       	mov	r26, r18
 3a6:	23 2f       	mov	r18, r19
 3a8:	34 2f       	mov	r19, r20
 3aa:	44 27       	eor	r20, r20
 3ac:	58 5f       	subi	r21, 0xF8	; 248
 3ae:	f3 cf       	rjmp	.-26     	; 0x396 <__addsf3x+0x38>
 3b0:	46 95       	lsr	r20
 3b2:	37 95       	ror	r19
 3b4:	27 95       	ror	r18
 3b6:	a7 95       	ror	r26
 3b8:	f0 40       	sbci	r31, 0x00	; 0
 3ba:	53 95       	inc	r21
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <__addsf3x+0x52>
 3be:	7e f4       	brtc	.+30     	; 0x3de <__addsf3x+0x80>
 3c0:	1f 16       	cp	r1, r31
 3c2:	ba 0b       	sbc	r27, r26
 3c4:	62 0b       	sbc	r22, r18
 3c6:	73 0b       	sbc	r23, r19
 3c8:	84 0b       	sbc	r24, r20
 3ca:	ba f0       	brmi	.+46     	; 0x3fa <__addsf3x+0x9c>
 3cc:	91 50       	subi	r25, 0x01	; 1
 3ce:	a1 f0       	breq	.+40     	; 0x3f8 <__addsf3x+0x9a>
 3d0:	ff 0f       	add	r31, r31
 3d2:	bb 1f       	adc	r27, r27
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	c2 f7       	brpl	.-16     	; 0x3cc <__addsf3x+0x6e>
 3dc:	0e c0       	rjmp	.+28     	; 0x3fa <__addsf3x+0x9c>
 3de:	ba 0f       	add	r27, r26
 3e0:	62 1f       	adc	r22, r18
 3e2:	73 1f       	adc	r23, r19
 3e4:	84 1f       	adc	r24, r20
 3e6:	48 f4       	brcc	.+18     	; 0x3fa <__addsf3x+0x9c>
 3e8:	87 95       	ror	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b7 95       	ror	r27
 3f0:	f7 95       	ror	r31
 3f2:	9e 3f       	cpi	r25, 0xFE	; 254
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__addsf3x+0x9a>
 3f6:	b0 cf       	rjmp	.-160    	; 0x358 <__addsf3+0x28>
 3f8:	93 95       	inc	r25
 3fa:	88 0f       	add	r24, r24
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	99 27       	eor	r25, r25
 400:	ee 0f       	add	r30, r30
 402:	97 95       	ror	r25
 404:	87 95       	ror	r24
 406:	08 95       	ret

00000408 <__cmpsf2>:
 408:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_cmp>
 40c:	08 f4       	brcc	.+2      	; 0x410 <__cmpsf2+0x8>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret

00000412 <__fixunssfsi>:
 412:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_splitA>
 416:	88 f0       	brcs	.+34     	; 0x43a <__fixunssfsi+0x28>
 418:	9f 57       	subi	r25, 0x7F	; 127
 41a:	98 f0       	brcs	.+38     	; 0x442 <__fixunssfsi+0x30>
 41c:	b9 2f       	mov	r27, r25
 41e:	99 27       	eor	r25, r25
 420:	b7 51       	subi	r27, 0x17	; 23
 422:	b0 f0       	brcs	.+44     	; 0x450 <__fixunssfsi+0x3e>
 424:	e1 f0       	breq	.+56     	; 0x45e <__fixunssfsi+0x4c>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	1a f0       	brmi	.+6      	; 0x436 <__fixunssfsi+0x24>
 430:	ba 95       	dec	r27
 432:	c9 f7       	brne	.-14     	; 0x426 <__fixunssfsi+0x14>
 434:	14 c0       	rjmp	.+40     	; 0x45e <__fixunssfsi+0x4c>
 436:	b1 30       	cpi	r27, 0x01	; 1
 438:	91 f0       	breq	.+36     	; 0x45e <__fixunssfsi+0x4c>
 43a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_zero>
 43e:	b1 e0       	ldi	r27, 0x01	; 1
 440:	08 95       	ret
 442:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 446:	67 2f       	mov	r22, r23
 448:	78 2f       	mov	r23, r24
 44a:	88 27       	eor	r24, r24
 44c:	b8 5f       	subi	r27, 0xF8	; 248
 44e:	39 f0       	breq	.+14     	; 0x45e <__fixunssfsi+0x4c>
 450:	b9 3f       	cpi	r27, 0xF9	; 249
 452:	cc f3       	brlt	.-14     	; 0x446 <__fixunssfsi+0x34>
 454:	86 95       	lsr	r24
 456:	77 95       	ror	r23
 458:	67 95       	ror	r22
 45a:	b3 95       	inc	r27
 45c:	d9 f7       	brne	.-10     	; 0x454 <__fixunssfsi+0x42>
 45e:	3e f4       	brtc	.+14     	; 0x46e <__fixunssfsi+0x5c>
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	08 95       	ret

00000470 <__floatunsisf>:
 470:	e8 94       	clt
 472:	09 c0       	rjmp	.+18     	; 0x486 <__floatsisf+0x12>

00000474 <__floatsisf>:
 474:	97 fb       	bst	r25, 7
 476:	3e f4       	brtc	.+14     	; 0x486 <__floatsisf+0x12>
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	99 23       	and	r25, r25
 488:	a9 f0       	breq	.+42     	; 0x4b4 <__floatsisf+0x40>
 48a:	f9 2f       	mov	r31, r25
 48c:	96 e9       	ldi	r25, 0x96	; 150
 48e:	bb 27       	eor	r27, r27
 490:	93 95       	inc	r25
 492:	f6 95       	lsr	r31
 494:	87 95       	ror	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f1 11       	cpse	r31, r1
 49e:	f8 cf       	rjmp	.-16     	; 0x490 <__floatsisf+0x1c>
 4a0:	fa f4       	brpl	.+62     	; 0x4e0 <__floatsisf+0x6c>
 4a2:	bb 0f       	add	r27, r27
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__floatsisf+0x36>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__floatsisf+0x6c>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	16 c0       	rjmp	.+44     	; 0x4e0 <__floatsisf+0x6c>
 4b4:	88 23       	and	r24, r24
 4b6:	11 f0       	breq	.+4      	; 0x4bc <__floatsisf+0x48>
 4b8:	96 e9       	ldi	r25, 0x96	; 150
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__floatsisf+0x6a>
 4bc:	77 23       	and	r23, r23
 4be:	21 f0       	breq	.+8      	; 0x4c8 <__floatsisf+0x54>
 4c0:	9e e8       	ldi	r25, 0x8E	; 142
 4c2:	87 2f       	mov	r24, r23
 4c4:	76 2f       	mov	r23, r22
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <__floatsisf+0x5e>
 4c8:	66 23       	and	r22, r22
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <__floatsisf+0x74>
 4cc:	96 e8       	ldi	r25, 0x86	; 134
 4ce:	86 2f       	mov	r24, r22
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	2a f0       	brmi	.+10     	; 0x4e0 <__floatsisf+0x6c>
 4d6:	9a 95       	dec	r25
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	da f7       	brpl	.-10     	; 0x4d6 <__floatsisf+0x62>
 4e0:	88 0f       	add	r24, r24
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret

000004ea <__fp_cmp>:
 4ea:	99 0f       	add	r25, r25
 4ec:	00 08       	sbc	r0, r0
 4ee:	55 0f       	add	r21, r21
 4f0:	aa 0b       	sbc	r26, r26
 4f2:	e0 e8       	ldi	r30, 0x80	; 128
 4f4:	fe ef       	ldi	r31, 0xFE	; 254
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	e8 07       	cpc	r30, r24
 4fc:	f9 07       	cpc	r31, r25
 4fe:	c0 f0       	brcs	.+48     	; 0x530 <__fp_cmp+0x46>
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	e4 07       	cpc	r30, r20
 506:	f5 07       	cpc	r31, r21
 508:	98 f0       	brcs	.+38     	; 0x530 <__fp_cmp+0x46>
 50a:	62 1b       	sub	r22, r18
 50c:	73 0b       	sbc	r23, r19
 50e:	84 0b       	sbc	r24, r20
 510:	95 0b       	sbc	r25, r21
 512:	39 f4       	brne	.+14     	; 0x522 <__fp_cmp+0x38>
 514:	0a 26       	eor	r0, r26
 516:	61 f0       	breq	.+24     	; 0x530 <__fp_cmp+0x46>
 518:	23 2b       	or	r18, r19
 51a:	24 2b       	or	r18, r20
 51c:	25 2b       	or	r18, r21
 51e:	21 f4       	brne	.+8      	; 0x528 <__fp_cmp+0x3e>
 520:	08 95       	ret
 522:	0a 26       	eor	r0, r26
 524:	09 f4       	brne	.+2      	; 0x528 <__fp_cmp+0x3e>
 526:	a1 40       	sbci	r26, 0x01	; 1
 528:	a6 95       	lsr	r26
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	81 1d       	adc	r24, r1
 52e:	81 1d       	adc	r24, r1
 530:	08 95       	ret

00000532 <__fp_inf>:
 532:	97 f9       	bld	r25, 7
 534:	9f 67       	ori	r25, 0x7F	; 127
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	08 95       	ret

0000053e <__fp_nan>:
 53e:	9f ef       	ldi	r25, 0xFF	; 255
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	08 95       	ret

00000544 <__fp_pscA>:
 544:	00 24       	eor	r0, r0
 546:	0a 94       	dec	r0
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	09 06       	cpc	r0, r25
 550:	08 95       	ret

00000552 <__fp_pscB>:
 552:	00 24       	eor	r0, r0
 554:	0a 94       	dec	r0
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	05 06       	cpc	r0, r21
 55e:	08 95       	ret

00000560 <__fp_round>:
 560:	09 2e       	mov	r0, r25
 562:	03 94       	inc	r0
 564:	00 0c       	add	r0, r0
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0xc>
 568:	88 23       	and	r24, r24
 56a:	52 f0       	brmi	.+20     	; 0x580 <__fp_round+0x20>
 56c:	bb 0f       	add	r27, r27
 56e:	40 f4       	brcc	.+16     	; 0x580 <__fp_round+0x20>
 570:	bf 2b       	or	r27, r31
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0x18>
 574:	60 ff       	sbrs	r22, 0
 576:	04 c0       	rjmp	.+8      	; 0x580 <__fp_round+0x20>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__fp_split3>:
 582:	57 fd       	sbrc	r21, 7
 584:	90 58       	subi	r25, 0x80	; 128
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	59 f0       	breq	.+22     	; 0x5a2 <__fp_splitA+0x10>
 58c:	5f 3f       	cpi	r21, 0xFF	; 255
 58e:	71 f0       	breq	.+28     	; 0x5ac <__fp_splitA+0x1a>
 590:	47 95       	ror	r20

00000592 <__fp_splitA>:
 592:	88 0f       	add	r24, r24
 594:	97 fb       	bst	r25, 7
 596:	99 1f       	adc	r25, r25
 598:	61 f0       	breq	.+24     	; 0x5b2 <__fp_splitA+0x20>
 59a:	9f 3f       	cpi	r25, 0xFF	; 255
 59c:	79 f0       	breq	.+30     	; 0x5bc <__fp_splitA+0x2a>
 59e:	87 95       	ror	r24
 5a0:	08 95       	ret
 5a2:	12 16       	cp	r1, r18
 5a4:	13 06       	cpc	r1, r19
 5a6:	14 06       	cpc	r1, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	f2 cf       	rjmp	.-28     	; 0x590 <__fp_split3+0xe>
 5ac:	46 95       	lsr	r20
 5ae:	f1 df       	rcall	.-30     	; 0x592 <__fp_splitA>
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__fp_splitA+0x30>
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	18 06       	cpc	r1, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	f1 cf       	rjmp	.-30     	; 0x59e <__fp_splitA+0xc>
 5bc:	86 95       	lsr	r24
 5be:	71 05       	cpc	r23, r1
 5c0:	61 05       	cpc	r22, r1
 5c2:	08 94       	sec
 5c4:	08 95       	ret

000005c6 <__fp_zero>:
 5c6:	e8 94       	clt

000005c8 <__fp_szero>:
 5c8:	bb 27       	eor	r27, r27
 5ca:	66 27       	eor	r22, r22
 5cc:	77 27       	eor	r23, r23
 5ce:	cb 01       	movw	r24, r22
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <__gesf2>:
 5d4:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_cmp>
 5d8:	08 f4       	brcc	.+2      	; 0x5dc <__gesf2+0x8>
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	08 95       	ret

000005de <__mulsf3>:
 5de:	0e 94 02 03 	call	0x604	; 0x604 <__mulsf3x>
 5e2:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 5e6:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 5ea:	38 f0       	brcs	.+14     	; 0x5fa <__mulsf3+0x1c>
 5ec:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__mulsf3+0x1c>
 5f2:	95 23       	and	r25, r21
 5f4:	11 f0       	breq	.+4      	; 0x5fa <__mulsf3+0x1c>
 5f6:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 5fa:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 5fe:	11 24       	eor	r1, r1
 600:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>

00000604 <__mulsf3x>:
 604:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 608:	70 f3       	brcs	.-36     	; 0x5e6 <__mulsf3+0x8>

0000060a <__mulsf3_pse>:
 60a:	95 9f       	mul	r25, r21
 60c:	c1 f3       	breq	.-16     	; 0x5fe <__mulsf3+0x20>
 60e:	95 0f       	add	r25, r21
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	55 1f       	adc	r21, r21
 614:	62 9f       	mul	r22, r18
 616:	f0 01       	movw	r30, r0
 618:	72 9f       	mul	r23, r18
 61a:	bb 27       	eor	r27, r27
 61c:	f0 0d       	add	r31, r0
 61e:	b1 1d       	adc	r27, r1
 620:	63 9f       	mul	r22, r19
 622:	aa 27       	eor	r26, r26
 624:	f0 0d       	add	r31, r0
 626:	b1 1d       	adc	r27, r1
 628:	aa 1f       	adc	r26, r26
 62a:	64 9f       	mul	r22, r20
 62c:	66 27       	eor	r22, r22
 62e:	b0 0d       	add	r27, r0
 630:	a1 1d       	adc	r26, r1
 632:	66 1f       	adc	r22, r22
 634:	82 9f       	mul	r24, r18
 636:	22 27       	eor	r18, r18
 638:	b0 0d       	add	r27, r0
 63a:	a1 1d       	adc	r26, r1
 63c:	62 1f       	adc	r22, r18
 63e:	73 9f       	mul	r23, r19
 640:	b0 0d       	add	r27, r0
 642:	a1 1d       	adc	r26, r1
 644:	62 1f       	adc	r22, r18
 646:	83 9f       	mul	r24, r19
 648:	a0 0d       	add	r26, r0
 64a:	61 1d       	adc	r22, r1
 64c:	22 1f       	adc	r18, r18
 64e:	74 9f       	mul	r23, r20
 650:	33 27       	eor	r19, r19
 652:	a0 0d       	add	r26, r0
 654:	61 1d       	adc	r22, r1
 656:	23 1f       	adc	r18, r19
 658:	84 9f       	mul	r24, r20
 65a:	60 0d       	add	r22, r0
 65c:	21 1d       	adc	r18, r1
 65e:	82 2f       	mov	r24, r18
 660:	76 2f       	mov	r23, r22
 662:	6a 2f       	mov	r22, r26
 664:	11 24       	eor	r1, r1
 666:	9f 57       	subi	r25, 0x7F	; 127
 668:	50 40       	sbci	r21, 0x00	; 0
 66a:	9a f0       	brmi	.+38     	; 0x692 <__mulsf3_pse+0x88>
 66c:	f1 f0       	breq	.+60     	; 0x6aa <__mulsf3_pse+0xa0>
 66e:	88 23       	and	r24, r24
 670:	4a f0       	brmi	.+18     	; 0x684 <__mulsf3_pse+0x7a>
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	bb 1f       	adc	r27, r27
 678:	66 1f       	adc	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	a9 f7       	brne	.-22     	; 0x66e <__mulsf3_pse+0x64>
 684:	9e 3f       	cpi	r25, 0xFE	; 254
 686:	51 05       	cpc	r21, r1
 688:	80 f0       	brcs	.+32     	; 0x6aa <__mulsf3_pse+0xa0>
 68a:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 68e:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	e4 f3       	brlt	.-8      	; 0x68e <__mulsf3_pse+0x84>
 696:	98 3e       	cpi	r25, 0xE8	; 232
 698:	d4 f3       	brlt	.-12     	; 0x68e <__mulsf3_pse+0x84>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	e7 95       	ror	r30
 6a6:	9f 5f       	subi	r25, 0xFF	; 255
 6a8:	c1 f7       	brne	.-16     	; 0x69a <__mulsf3_pse+0x90>
 6aa:	fe 2b       	or	r31, r30
 6ac:	88 0f       	add	r24, r24
 6ae:	91 1d       	adc	r25, r1
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

000006b8 <__umulhisi3>:
 6b8:	a2 9f       	mul	r26, r18
 6ba:	b0 01       	movw	r22, r0
 6bc:	b3 9f       	mul	r27, r19
 6be:	c0 01       	movw	r24, r0
 6c0:	a3 9f       	mul	r26, r19
 6c2:	70 0d       	add	r23, r0
 6c4:	81 1d       	adc	r24, r1
 6c6:	11 24       	eor	r1, r1
 6c8:	91 1d       	adc	r25, r1
 6ca:	b2 9f       	mul	r27, r18
 6cc:	70 0d       	add	r23, r0
 6ce:	81 1d       	adc	r24, r1
 6d0:	11 24       	eor	r1, r1
 6d2:	91 1d       	adc	r25, r1
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
